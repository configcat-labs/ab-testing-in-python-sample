# ampli.py
# 
# Ampli - A strong typed wrapper for your Analytics
# 
# This file is generated by Amplitude.
# To update run 'ampli pull book-launch-website'
# 
# Required dependencies: amplitude-analytics
# Tracking Plan Version: 1
# Build: 1.0.0
# Runtime: python-ampli
# 
# [View Tracking Plan](https://data.amplitude.com/codedbychavez/ab-testing-python/events/main/latest)
# 
# [Full Setup Instructions](https://data.amplitude.com/codedbychavez/ab-testing-python/implementation/main/latest/getting-started/book-launch-website)
# 
# pylint: skip-file
# flake8: noqa
# 
# WARNING: We do our best to remove lint warning from this file but if you would like to disable linting completely you will need to take some extra steps. See more details here: https://stackoverflow.com/questions/18444840/how-to-disable-a-pep8-error-in-a-specific-file/48772387


import logging
import enum
from typing import Dict, Optional, List, Any, Union

from amplitude import Amplitude, Config, Plan, BaseEvent, EventOptions, IdentifyEvent, GroupIdentifyEvent


class Environment(enum.Enum):
    DEVELOPMENT = 'development'
    PRODUCTION = 'production'


API_KEY: Dict[Environment, str] = {
    Environment("development"): "",
    Environment("production"): "af6a7814f14f952f51f8363bc74823b5"
}

DEFAULT_CONFIGURATION = Config(
    plan=Plan(
        branch="main",
        source="book-launch-website",
        version="1",
        version_id="2c2e06ca-54cc-4828-b799-f7915499bd68"
    )
)


class LoadClientOptions:
    """Client options setting to initialize Ampli client

    :param api_key: The API key of Amplitude project. Default to None.
    :param instance: The core SDK instance used by Ampli client. Default to None
    :param configuration: The core SDK client configuration instance. Default to None
    """

    def __init__(self, api_key: Optional[str] = None,
                 instance: Optional[Amplitude] = None,
                 configuration: Optional[Config] = None):
        self.api_key = api_key
        self.instance = instance
        self.configuration = configuration


class LoadOptions:
    """Options setting to initialize Ampli client

    :param environment: The environment of Amplitude Data project. Default to None.
    :param disabled: The flag of disabled Ampli client. Default to False
    :param client: The LoadClientOptions instance. Default to None
    """

    def __init__(self, environment: Environment = None,
                 disabled: bool = False,
                 client: LoadClientOptions = None):
        self.environment = environment
        self.disabled = disabled
        self.client = client


class BookPurchase(BaseEvent):
    """book_purchase

    [View in Tracking Plan](https://data.amplitude.com/codedbychavez/ab-testing-python/events/main/latest/book_purchase)

    Triggers when purchasing a book

    Owner: Chavez Harris
    """

    def __init__(
        self
    ):
        super().__init__(event_type="book_purchase")


class Ampli:

    def __init__(self):
        self.client: Amplitude = None
        self.disabled: bool = False

    def load(self, options: Optional[LoadOptions] = None):
        """Initialize the Ampli wrapper. Call once when your application starts.

        :param options: Configuration options to initialize the Ampli wrapper with.
        """
        if not options:
            options = LoadOptions()
        self.disabled = options.disabled

        if self.client:
            logging.getLogger(__name__).warning('Warning: Ampli is already initialized. ampli.load() should be called once at application start up.')
            return

        if not options.client:
            options.client = LoadClientOptions(configuration=DEFAULT_CONFIGURATION)

        api_key = None
        if options.client.api_key:
            api_key = options.client.api_key
        elif options.environment:
            api_key = API_KEY[options.environment]
        if not (api_key or options.client.instance):
            logging.getLogger(__name__).error("ampli.load() requires 'environment', 'client.api_key', or 'client.instance'")
            return

        configuration = options.client.configuration or DEFAULT_CONFIGURATION
        self.client = options.client.instance or Amplitude(api_key=api_key, configuration=configuration)

        if not self.client.configuration.plan:
            self.client.configuration.plan = DEFAULT_CONFIGURATION.plan

        # Python SDK min version 1.1.0 supports IngestionMetadata
        # This lazy module loading is for backward compatible concern.
        import amplitude
        if hasattr(amplitude, "IngestionMetadata"):
            ingestion_metadata_class = getattr(amplitude, "IngestionMetadata")
            self.client.configuration.ingestion_metadata = ingestion_metadata_class(
                source_name="python-python-ampli",
                source_version="1.0.0"
            )

    def initialized_and_enabled(self) -> bool:
        """ Check if Ampli is initialized and enabled

        :returns: True if Ampli is initialized and not disabled, False otherwise.
        """
        if not self.client:
            logging.getLogger(__name__).error("Ampli is not yet initialized. Called `ampli.load()` on app start.")
            return False
        return not self.disabled

    def track(self, user_id: Optional[str], event: BaseEvent, event_options: Optional[EventOptions] = None):
        """Track event

        :param user_id: The user's ID.
        :param event: The event to be tracked.
        :param event_options: Extra optional event attributes options.
        """
        if not self.initialized_and_enabled():
            return
        if not event_options:
            event_options = EventOptions()
        if user_id:
            event_options["user_id"] = user_id
        event.load_event_options(event_options)
        self.client.track(event)

    def identify(self, user_id: Optional[str], event_options: Optional[EventOptions] = None):
        """Identify a user and set user properties.

        :param user_id: The user's ID.
        :param event_options: Extra optional event attributes options.
        """
        if not self.initialized_and_enabled():
            return
        event = IdentifyEvent()
        self.track(user_id, event, event_options)

    def group_identify(self, group_type: str,
                       group_name: str,
                       event_options: Optional[EventOptions] = None):
        """Identify a group and set group properties.

        :param group_type: The group type.
        :param group_name: The group name.
        :param event_options: Extra optional event attributes options.
        """
        if not self.initialized_and_enabled():
            return
        event = GroupIdentifyEvent()
        event.groups = {group_type: group_name}
        self.track(None, event, event_options)

    def set_group(self, user_id: Optional[str],
                  group_type: str,
                  group_name: Union[str, List[str]],
                  event_options: Optional[EventOptions] = None):
        """Set Group for the current user

        :param user_id: The user's ID.
        :param group_type: The group type.
        :param group_name: The group name.
        :param event_options: Extra optional event attributes options.
        """
        if not self.initialized_and_enabled():
            return
        if not event_options:
            event_options = EventOptions()
        if user_id:
            event_options["user_id"] = user_id
        self.client.set_group(group_type, group_name, event_options)

    def flush(self):
        """Flush events waiting in buffer"""
        if not self.initialized_and_enabled():
            return []
        return self.client.flush()

    def shutdown(self):
        """Disable and shutdown the Ampli client"""
        if not self.initialized_and_enabled():
            return
        self.client.shutdown()
        self.disabled = True

    def book_purchase(
        self,
        user_id: Optional[str],
        event_options: Optional[EventOptions] = None
    ):
        """Track event 'book_purchase'

        [View in Tracking Plan](https://data.amplitude.com/codedbychavez/ab-testing-python/events/main/latest/Track%20event%20'book_purchase')

        Triggers when purchasing a book

        Owner: Chavez Harris

        :param user_id: The user's ID.
        :param event_options: Extra optional event attributes options.
        """
        self.track(user_id, BookPurchase(), event_options)


ampli = Ampli()
